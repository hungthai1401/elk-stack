input {
	beats {
		port => 5044
		ssl => false
	}

	# tcp {
	# 	port => 50000
	# }

	# file {
	# 	path => "/var/log/mylog/access.log"
	# 	start_position => "beginning"
	# 	type => "nginx"
	# }

	# file {
	# 	path => "/var/log/mylog/sql-*.log"
	# 	start_position => "beginning"
	# 	type => "database"
	# }
}

filter {
	if [log_type] == "nginx" {
		grok {
      		match => { "message" => '%{IPORHOST:remote_addr} - %{DATA:remote_user} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{DATA:url} HTTP/%{NUMBER:http}" %{NUMBER:status} %{NUMBER:body_bytes_sent} "%{DATA:http_referer}" "%{DATA:http_user_agent}" "%{DATA:http_x_forwarded_for}" "%{IPORHOST:host}" sn="%{DATA:server_name}" rt=%{NUMBER:request_time} ua="%{DATA:upstream_addr}" us="%{DATA:upstream_status}" ut="%{NUMBER:upstream_response_time}" ul="%{NUMBER:upstream_response_length}" cs=%{GREEDYDATA:upstream_cache_status}' }
    	}
		date {
			match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
			target => "@timestamp"
  		}
	}

	if [log_type] == "database" {
		grok {
			match => { "message" => '\[%{TIMESTAMP_ISO8601:timestamp}\] %{WORD:environtment}.%{WORD:log_level}: %{GREEDYDATA:log_message}' }
		}
		date {
			match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
			target => "@timestamp"
  		}
	}
}

output {
	if [log_type] == "nginx" {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "nginx_logs_%{+YYYY_MM_dd}"
			template => "/usr/share/logstash/templates/nginx.template.json"
			template_name => "nginx"
			template_overwrite => true 
		}
	}

	if [log_type] == "database" {
		stdout { codec => rubydebug }
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "database_logs_%{+YYYY_MM_dd}"
		}
	}
}
